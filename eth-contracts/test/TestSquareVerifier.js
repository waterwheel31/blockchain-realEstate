// import { AssertionError } from "assert";

// import { isMainThread } from "worker_threads";

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

var Verifier = artifacts.require("Verifier");

const fs = require('fs');
var proof = fs.readFileSync("proof.json").toString();
var JsonProof = JSON.parse(proof);
// console.log("proof:", proof);

contract("TestSquareVerifier", accounts =>{

    const account_one = accounts[0];
    
    //console.log('JSONproof:', JsonProof);
    let a = JsonProof.proof.a;
    let b = JsonProof.proof.b;
    let c = JsonProof.proof.c;
    let inputs = JsonProof.inputs;
    console.log('a:',a); 
    console.log('b:',b);
    console.log('c:',c);
    console.log('inputs:',inputs);

    describe('test of verifier ', function(){

        beforeEach(async function(){
            this.contract = await Verifier.new({from: account_one});

        });
        console.log("test start");


        // Test verification with correct proof
        it("test vetification with correct proof", async function(){
                let result = await this.contract.verifyTx.call(a,b,c,inputs);
                //console.log('result:',result);
                assert.equal(result, true, 'the result is unexpected');
        });

        // Test verification with incorrect proof
        it("test vetification with incorrect proof", async function(){
                let result = await this.contract.verifyTx.call(a,b,a,inputs);
                //console.log('result:',result);
                assert.equal(result, false, 'the result is unexpected');

        });


    });
});



